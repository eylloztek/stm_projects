
11_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026ec  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080028b0  080028b0  000038b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c0  080028c0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080028c0  080028c0  000038c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028c8  080028c8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c8  080028c8  000038c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028cc  080028cc  000038cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080028dc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080028dc  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d79  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f7  00000000  00000000  0000cdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0000e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079f  00000000  00000000  0000ee90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a4d  00000000  00000000  0000f62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6c4  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca9da  00000000  00000000  0003b740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010611a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000292c  00000000  00000000  00106160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00108a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002898 	.word	0x08002898

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002898 	.word	0x08002898

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <setPWMDutyCycle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setPWMDutyCycle(uint16_t duty) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]

	if (duty <= 100) {
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	2b64      	cmp	r3, #100	@ 0x64
 800053e:	d809      	bhi.n	8000554 <setPWMDutyCycle+0x24>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty * 10);
 8000540:	88fa      	ldrh	r2, [r7, #6]
 8000542:	4613      	mov	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	461a      	mov	r2, r3
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <setPWMDutyCycle+0x44>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		duty = duty * 10;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
	}
}
 8000552:	e009      	b.n	8000568 <setPWMDutyCycle+0x38>
		duty = duty * 10;
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	461a      	mov	r2, r3
 8000558:	0092      	lsls	r2, r2, #2
 800055a:	4413      	add	r3, r2
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000560:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <setPWMDutyCycle+0x44>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	88fa      	ldrh	r2, [r7, #6]
 8000566:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	20000028 	.word	0x20000028

08000578 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800057e:	f000 fa0f 	bl	80009a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000582:	f000 f81d 	bl	80005c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000586:	f000 f8ff 	bl	8000788 <MX_GPIO_Init>
	MX_TIM2_Init();
 800058a:	f000 f887 	bl	800069c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800058e:	2100      	movs	r1, #0
 8000590:	480a      	ldr	r0, [pc, #40]	@ (80005bc <main+0x44>)
 8000592:	f001 fb71 	bl	8001c78 <HAL_TIM_PWM_Start>
		HAL_Delay(1000);

		setPWMDutyCycle(100);
		HAL_Delay(1000);
		*/
		for (int i = 0; i < 100; i++) {
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	e00a      	b.n	80005b2 <main+0x3a>
			setPWMDutyCycle(i);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ffc5 	bl	8000530 <setPWMDutyCycle>
			HAL_Delay(20);
 80005a6:	2014      	movs	r0, #20
 80005a8:	f000 fa6c 	bl	8000a84 <HAL_Delay>
		for (int i = 0; i < 100; i++) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3301      	adds	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b63      	cmp	r3, #99	@ 0x63
 80005b6:	ddf1      	ble.n	800059c <main+0x24>
 80005b8:	e7ed      	b.n	8000596 <main+0x1e>
 80005ba:	bf00      	nop
 80005bc:	20000028 	.word	0x20000028

080005c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2234      	movs	r2, #52	@ 0x34
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f936 	bl	8002840 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000694 <SystemClock_Config+0xd4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a29      	ldr	r2, [pc, #164]	@ (8000694 <SystemClock_Config+0xd4>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f4:	4b27      	ldr	r3, [pc, #156]	@ (8000694 <SystemClock_Config+0xd4>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000600:	2300      	movs	r3, #0
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <SystemClock_Config+0xd8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800060c:	4a22      	ldr	r2, [pc, #136]	@ (8000698 <SystemClock_Config+0xd8>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <SystemClock_Config+0xd8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000634:	2310      	movs	r3, #16
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000638:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800063c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800063e:	2304      	movs	r3, #4
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000646:	2302      	movs	r3, #2
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4618      	mov	r0, r3
 8000650:	f000 ffcc 	bl	80015ec <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x9e>
		Error_Handler();
 800065a:	f000 f8af 	bl	80007bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2102      	movs	r1, #2
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fca0 	bl	8000fc0 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xca>
		Error_Handler();
 8000686:	f000 f899 	bl	80007bc <Error_Handler>
	}
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b08e      	sub	sp, #56	@ 0x38
 80006a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]
 80006ca:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80006cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <MX_TIM2_Init+0xe8>)
 80006ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006d2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 84 - 1;
 80006d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <MX_TIM2_Init+0xe8>)
 80006d6:	2253      	movs	r2, #83	@ 0x53
 80006d8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006da:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <MX_TIM2_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 80006e0:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <MX_TIM2_Init+0xe8>)
 80006e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006e6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e8:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <MX_TIM2_Init+0xe8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ee:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <MX_TIM2_Init+0xe8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80006f4:	4823      	ldr	r0, [pc, #140]	@ (8000784 <MX_TIM2_Init+0xe8>)
 80006f6:	f001 fa17 	bl	8001b28 <HAL_TIM_Base_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0x68>
		Error_Handler();
 8000700:	f000 f85c 	bl	80007bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000708:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800070a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800070e:	4619      	mov	r1, r3
 8000710:	481c      	ldr	r0, [pc, #112]	@ (8000784 <MX_TIM2_Init+0xe8>)
 8000712:	f001 fc3b 	bl	8001f8c <HAL_TIM_ConfigClockSource>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0x84>
		Error_Handler();
 800071c:	f000 f84e 	bl	80007bc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000720:	4818      	ldr	r0, [pc, #96]	@ (8000784 <MX_TIM2_Init+0xe8>)
 8000722:	f001 fa50 	bl	8001bc6 <HAL_TIM_PWM_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x94>
		Error_Handler();
 800072c:	f000 f846 	bl	80007bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4619      	mov	r1, r3
 800073e:	4811      	ldr	r0, [pc, #68]	@ (8000784 <MX_TIM2_Init+0xe8>)
 8000740:	f002 f802 	bl	8002748 <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800074a:	f000 f837 	bl	80007bc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074e:	2360      	movs	r3, #96	@ 0x60
 8000750:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	4619      	mov	r1, r3
 8000764:	4807      	ldr	r0, [pc, #28]	@ (8000784 <MX_TIM2_Init+0xe8>)
 8000766:	f001 fb4f 	bl	8001e08 <HAL_TIM_PWM_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000770:	f000 f824 	bl	80007bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <MX_TIM2_Init+0xe8>)
 8000776:	f000 f86f 	bl	8000858 <HAL_TIM_MspPostInit>

}
 800077a:	bf00      	nop
 800077c:	3738      	adds	r7, #56	@ 0x38
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000028 	.word	0x20000028

08000788 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_GPIO_Init+0x30>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <MX_GPIO_Init+0x30>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_GPIO_Init+0x30>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <Error_Handler+0x8>

080007c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000806:	2007      	movs	r0, #7
 8000808:	f000 fa12 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000828:	d10d      	bne.n	8000846 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <HAL_TIM_Base_MspInit+0x3c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000832:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <HAL_TIM_Base_MspInit+0x3c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6413      	str	r3, [r2, #64]	@ 0x40
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_TIM_Base_MspInit+0x3c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000878:	d11d      	bne.n	80008b6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <HAL_TIM_MspPostInit+0x68>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a0f      	ldr	r2, [pc, #60]	@ (80008c0 <HAL_TIM_MspPostInit+0x68>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <HAL_TIM_MspPostInit+0x68>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000896:	2320      	movs	r3, #32
 8000898:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <HAL_TIM_MspPostInit+0x6c>)
 80008b2:	f000 f9f1 	bl	8000c98 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <NMI_Handler+0x4>

080008d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <MemManage_Handler+0x4>

080008e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <UsageFault_Handler+0x4>

080008f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091e:	f000 f891 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	@ (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000984 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000950:	f7ff ffea 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	@ (800098c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	@ (8000998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800097a:	f001 ff69 	bl	8002850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fdfb 	bl	8000578 <main>
  bx  lr    
 8000982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	080028d0 	.word	0x080028d0
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	20000074 	.word	0x20000074

0800099c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <HAL_Init+0x40>)
 80009aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_Init+0x40>)
 80009b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <HAL_Init+0x40>)
 80009c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f931 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fef8 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023c00 	.word	0x40023c00

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f93b 	bl	8000c7e <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f000 f911 	bl	8000c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	@ (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000070 	.word	0x20000070

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	@ (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000070 	.word	0x20000070

08000a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a8c:	f7ff ffee 	bl	8000a6c <HAL_GetTick>
 8000a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a9c:	d005      	beq.n	8000aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_Delay+0x44>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aaa:	bf00      	nop
 8000aac:	f7ff ffde 	bl	8000a6c <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d8f7      	bhi.n	8000aac <HAL_Delay+0x28>
  {
  }
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	@ (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	@ (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	@ 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	@ 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f7ff ff8e 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff47 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff5c 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff8e 	bl	8000b84 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5d 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffb0 	bl	8000bec <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e165      	b.n	8000f80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	f040 8154 	bne.w	8000f7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d005      	beq.n	8000cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d130      	bne.n	8000d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	f003 0201 	and.w	r2, r3, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d017      	beq.n	8000d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d123      	bne.n	8000ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	69b9      	ldr	r1, [r7, #24]
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0203 	and.w	r2, r3, #3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80ae 	beq.w	8000f7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b5d      	ldr	r3, [pc, #372]	@ (8000f98 <HAL_GPIO_Init+0x300>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	4a5c      	ldr	r2, [pc, #368]	@ (8000f98 <HAL_GPIO_Init+0x300>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f98 <HAL_GPIO_Init+0x300>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3a:	4a58      	ldr	r2, [pc, #352]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4f      	ldr	r2, [pc, #316]	@ (8000fa0 <HAL_GPIO_Init+0x308>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d025      	beq.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa4 <HAL_GPIO_Init+0x30c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d01f      	beq.n	8000eae <HAL_GPIO_Init+0x216>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d019      	beq.n	8000eaa <HAL_GPIO_Init+0x212>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4c      	ldr	r2, [pc, #304]	@ (8000fac <HAL_GPIO_Init+0x314>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0x20e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4b      	ldr	r2, [pc, #300]	@ (8000fb0 <HAL_GPIO_Init+0x318>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d00d      	beq.n	8000ea2 <HAL_GPIO_Init+0x20a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4a      	ldr	r2, [pc, #296]	@ (8000fb4 <HAL_GPIO_Init+0x31c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d007      	beq.n	8000e9e <HAL_GPIO_Init+0x206>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a49      	ldr	r2, [pc, #292]	@ (8000fb8 <HAL_GPIO_Init+0x320>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_GPIO_Init+0x202>
 8000e96:	2306      	movs	r3, #6
 8000e98:	e00c      	b.n	8000eb4 <HAL_GPIO_Init+0x21c>
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	e00a      	b.n	8000eb4 <HAL_GPIO_Init+0x21c>
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	e008      	b.n	8000eb4 <HAL_GPIO_Init+0x21c>
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x21c>
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e004      	b.n	8000eb4 <HAL_GPIO_Init+0x21c>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_Init+0x21c>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <HAL_GPIO_Init+0x21c>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	f002 0203 	and.w	r2, r2, #3
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec4:	4935      	ldr	r1, [pc, #212]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fbc <HAL_GPIO_Init+0x324>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ef6:	4a31      	ldr	r2, [pc, #196]	@ (8000fbc <HAL_GPIO_Init+0x324>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000efc:	4b2f      	ldr	r3, [pc, #188]	@ (8000fbc <HAL_GPIO_Init+0x324>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f20:	4a26      	ldr	r2, [pc, #152]	@ (8000fbc <HAL_GPIO_Init+0x324>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f26:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <HAL_GPIO_Init+0x324>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <HAL_GPIO_Init+0x324>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <HAL_GPIO_Init+0x324>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f74:	4a11      	ldr	r2, [pc, #68]	@ (8000fbc <HAL_GPIO_Init+0x324>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	f67f ae96 	bls.w	8000cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3724      	adds	r7, #36	@ 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40021400 	.word	0x40021400
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	40013c00 	.word	0x40013c00

08000fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e0cc      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd4:	4b68      	ldr	r3, [pc, #416]	@ (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d90c      	bls.n	8000ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe2:	4b65      	ldr	r3, [pc, #404]	@ (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fea:	4b63      	ldr	r3, [pc, #396]	@ (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d001      	beq.n	8000ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e0b8      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d020      	beq.n	800104a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001014:	4b59      	ldr	r3, [pc, #356]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4a58      	ldr	r2, [pc, #352]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800101a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800101e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800102c:	4b53      	ldr	r3, [pc, #332]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a52      	ldr	r2, [pc, #328]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001032:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001038:	4b50      	ldr	r3, [pc, #320]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	494d      	ldr	r1, [pc, #308]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001046:	4313      	orrs	r3, r2
 8001048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d044      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d107      	bne.n	800106e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	4b47      	ldr	r3, [pc, #284]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d119      	bne.n	800109e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e07f      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d003      	beq.n	800107e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800107a:	2b03      	cmp	r3, #3
 800107c:	d107      	bne.n	800108e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800107e:	4b3f      	ldr	r3, [pc, #252]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e06f      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108e:	4b3b      	ldr	r3, [pc, #236]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e067      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800109e:	4b37      	ldr	r3, [pc, #220]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f023 0203 	bic.w	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4934      	ldr	r1, [pc, #208]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b0:	f7ff fcdc 	bl	8000a6c <HAL_GetTick>
 80010b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b6:	e00a      	b.n	80010ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b8:	f7ff fcd8 	bl	8000a6c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e04f      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ce:	4b2b      	ldr	r3, [pc, #172]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 020c 	and.w	r2, r3, #12
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	429a      	cmp	r2, r3
 80010de:	d1eb      	bne.n	80010b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010e0:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d20c      	bcs.n	8001108 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f6:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e032      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001114:	4b19      	ldr	r3, [pc, #100]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	4916      	ldr	r1, [pc, #88]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	4313      	orrs	r3, r2
 8001124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d009      	beq.n	8001146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	490e      	ldr	r1, [pc, #56]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	4313      	orrs	r3, r2
 8001144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001146:	f000 f821 	bl	800118c <HAL_RCC_GetSysClockFreq>
 800114a:	4602      	mov	r2, r0
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	490a      	ldr	r1, [pc, #40]	@ (8001180 <HAL_RCC_ClockConfig+0x1c0>)
 8001158:	5ccb      	ldrb	r3, [r1, r3]
 800115a:	fa22 f303 	lsr.w	r3, r2, r3
 800115e:	4a09      	ldr	r2, [pc, #36]	@ (8001184 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_RCC_ClockConfig+0x1c8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fc3c 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023c00 	.word	0x40023c00
 800117c:	40023800 	.word	0x40023800
 8001180:	080028b0 	.word	0x080028b0
 8001184:	20000000 	.word	0x20000000
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800118c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001190:	b0ae      	sub	sp, #184	@ 0xb8
 8001192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011b2:	4bcb      	ldr	r3, [pc, #812]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b0c      	cmp	r3, #12
 80011bc:	f200 8206 	bhi.w	80015cc <HAL_RCC_GetSysClockFreq+0x440>
 80011c0:	a201      	add	r2, pc, #4	@ (adr r2, 80011c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80011c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c6:	bf00      	nop
 80011c8:	080011fd 	.word	0x080011fd
 80011cc:	080015cd 	.word	0x080015cd
 80011d0:	080015cd 	.word	0x080015cd
 80011d4:	080015cd 	.word	0x080015cd
 80011d8:	08001205 	.word	0x08001205
 80011dc:	080015cd 	.word	0x080015cd
 80011e0:	080015cd 	.word	0x080015cd
 80011e4:	080015cd 	.word	0x080015cd
 80011e8:	0800120d 	.word	0x0800120d
 80011ec:	080015cd 	.word	0x080015cd
 80011f0:	080015cd 	.word	0x080015cd
 80011f4:	080015cd 	.word	0x080015cd
 80011f8:	080013fd 	.word	0x080013fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011fc:	4bb9      	ldr	r3, [pc, #740]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80011fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001202:	e1e7      	b.n	80015d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001204:	4bb8      	ldr	r3, [pc, #736]	@ (80014e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800120a:	e1e3      	b.n	80015d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800120c:	4bb4      	ldr	r3, [pc, #720]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001218:	4bb1      	ldr	r3, [pc, #708]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d071      	beq.n	8001308 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001224:	4bae      	ldr	r3, [pc, #696]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	099b      	lsrs	r3, r3, #6
 800122a:	2200      	movs	r2, #0
 800122c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001230:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001234:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800123c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800124a:	4622      	mov	r2, r4
 800124c:	462b      	mov	r3, r5
 800124e:	f04f 0000 	mov.w	r0, #0
 8001252:	f04f 0100 	mov.w	r1, #0
 8001256:	0159      	lsls	r1, r3, #5
 8001258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800125c:	0150      	lsls	r0, r2, #5
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4621      	mov	r1, r4
 8001264:	1a51      	subs	r1, r2, r1
 8001266:	6439      	str	r1, [r7, #64]	@ 0x40
 8001268:	4629      	mov	r1, r5
 800126a:	eb63 0301 	sbc.w	r3, r3, r1
 800126e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800127c:	4649      	mov	r1, r9
 800127e:	018b      	lsls	r3, r1, #6
 8001280:	4641      	mov	r1, r8
 8001282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001286:	4641      	mov	r1, r8
 8001288:	018a      	lsls	r2, r1, #6
 800128a:	4641      	mov	r1, r8
 800128c:	1a51      	subs	r1, r2, r1
 800128e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001290:	4649      	mov	r1, r9
 8001292:	eb63 0301 	sbc.w	r3, r3, r1
 8001296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80012a4:	4649      	mov	r1, r9
 80012a6:	00cb      	lsls	r3, r1, #3
 80012a8:	4641      	mov	r1, r8
 80012aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012ae:	4641      	mov	r1, r8
 80012b0:	00ca      	lsls	r2, r1, #3
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	4622      	mov	r2, r4
 80012ba:	189b      	adds	r3, r3, r2
 80012bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80012be:	462b      	mov	r3, r5
 80012c0:	460a      	mov	r2, r1
 80012c2:	eb42 0303 	adc.w	r3, r2, r3
 80012c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80012d4:	4629      	mov	r1, r5
 80012d6:	024b      	lsls	r3, r1, #9
 80012d8:	4621      	mov	r1, r4
 80012da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80012de:	4621      	mov	r1, r4
 80012e0:	024a      	lsls	r2, r1, #9
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012ea:	2200      	movs	r2, #0
 80012ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80012f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80012f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80012f8:	f7fe ff84 	bl	8000204 <__aeabi_uldivmod>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4613      	mov	r3, r2
 8001302:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001306:	e067      	b.n	80013d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001308:	4b75      	ldr	r3, [pc, #468]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	099b      	lsrs	r3, r3, #6
 800130e:	2200      	movs	r2, #0
 8001310:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001314:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001318:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800131c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001320:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001322:	2300      	movs	r3, #0
 8001324:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001326:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800132a:	4622      	mov	r2, r4
 800132c:	462b      	mov	r3, r5
 800132e:	f04f 0000 	mov.w	r0, #0
 8001332:	f04f 0100 	mov.w	r1, #0
 8001336:	0159      	lsls	r1, r3, #5
 8001338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800133c:	0150      	lsls	r0, r2, #5
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4621      	mov	r1, r4
 8001344:	1a51      	subs	r1, r2, r1
 8001346:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001348:	4629      	mov	r1, r5
 800134a:	eb63 0301 	sbc.w	r3, r3, r1
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800135c:	4649      	mov	r1, r9
 800135e:	018b      	lsls	r3, r1, #6
 8001360:	4641      	mov	r1, r8
 8001362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001366:	4641      	mov	r1, r8
 8001368:	018a      	lsls	r2, r1, #6
 800136a:	4641      	mov	r1, r8
 800136c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001370:	4649      	mov	r1, r9
 8001372:	eb63 0b01 	sbc.w	fp, r3, r1
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001382:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001386:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800138a:	4692      	mov	sl, r2
 800138c:	469b      	mov	fp, r3
 800138e:	4623      	mov	r3, r4
 8001390:	eb1a 0303 	adds.w	r3, sl, r3
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	462b      	mov	r3, r5
 8001398:	eb4b 0303 	adc.w	r3, fp, r3
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80013aa:	4629      	mov	r1, r5
 80013ac:	028b      	lsls	r3, r1, #10
 80013ae:	4621      	mov	r1, r4
 80013b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013b4:	4621      	mov	r1, r4
 80013b6:	028a      	lsls	r2, r1, #10
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013c0:	2200      	movs	r2, #0
 80013c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80013c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80013c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80013ca:	f7fe ff1b 	bl	8000204 <__aeabi_uldivmod>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4613      	mov	r3, r2
 80013d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80013d8:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	0c1b      	lsrs	r3, r3, #16
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	3301      	adds	r3, #1
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80013ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80013ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013fa:	e0eb      	b.n	80015d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013fc:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001404:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001408:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d06b      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001414:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	2200      	movs	r2, #0
 800141c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800141e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001426:	663b      	str	r3, [r7, #96]	@ 0x60
 8001428:	2300      	movs	r3, #0
 800142a:	667b      	str	r3, [r7, #100]	@ 0x64
 800142c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001430:	4622      	mov	r2, r4
 8001432:	462b      	mov	r3, r5
 8001434:	f04f 0000 	mov.w	r0, #0
 8001438:	f04f 0100 	mov.w	r1, #0
 800143c:	0159      	lsls	r1, r3, #5
 800143e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001442:	0150      	lsls	r0, r2, #5
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4621      	mov	r1, r4
 800144a:	1a51      	subs	r1, r2, r1
 800144c:	61b9      	str	r1, [r7, #24]
 800144e:	4629      	mov	r1, r5
 8001450:	eb63 0301 	sbc.w	r3, r3, r1
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001462:	4659      	mov	r1, fp
 8001464:	018b      	lsls	r3, r1, #6
 8001466:	4651      	mov	r1, sl
 8001468:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800146c:	4651      	mov	r1, sl
 800146e:	018a      	lsls	r2, r1, #6
 8001470:	4651      	mov	r1, sl
 8001472:	ebb2 0801 	subs.w	r8, r2, r1
 8001476:	4659      	mov	r1, fp
 8001478:	eb63 0901 	sbc.w	r9, r3, r1
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001488:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800148c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001490:	4690      	mov	r8, r2
 8001492:	4699      	mov	r9, r3
 8001494:	4623      	mov	r3, r4
 8001496:	eb18 0303 	adds.w	r3, r8, r3
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	462b      	mov	r3, r5
 800149e:	eb49 0303 	adc.w	r3, r9, r3
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80014b0:	4629      	mov	r1, r5
 80014b2:	024b      	lsls	r3, r1, #9
 80014b4:	4621      	mov	r1, r4
 80014b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014ba:	4621      	mov	r1, r4
 80014bc:	024a      	lsls	r2, r1, #9
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014c6:	2200      	movs	r2, #0
 80014c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80014cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80014d0:	f7fe fe98 	bl	8000204 <__aeabi_uldivmod>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4613      	mov	r3, r2
 80014da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014de:	e065      	b.n	80015ac <HAL_RCC_GetSysClockFreq+0x420>
 80014e0:	40023800 	.word	0x40023800
 80014e4:	00f42400 	.word	0x00f42400
 80014e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ec:	4b3d      	ldr	r3, [pc, #244]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	2200      	movs	r2, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	4611      	mov	r1, r2
 80014f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80014fe:	2300      	movs	r3, #0
 8001500:	657b      	str	r3, [r7, #84]	@ 0x54
 8001502:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001506:	4642      	mov	r2, r8
 8001508:	464b      	mov	r3, r9
 800150a:	f04f 0000 	mov.w	r0, #0
 800150e:	f04f 0100 	mov.w	r1, #0
 8001512:	0159      	lsls	r1, r3, #5
 8001514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001518:	0150      	lsls	r0, r2, #5
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4641      	mov	r1, r8
 8001520:	1a51      	subs	r1, r2, r1
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	4649      	mov	r1, r9
 8001526:	eb63 0301 	sbc.w	r3, r3, r1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001538:	4659      	mov	r1, fp
 800153a:	018b      	lsls	r3, r1, #6
 800153c:	4651      	mov	r1, sl
 800153e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001542:	4651      	mov	r1, sl
 8001544:	018a      	lsls	r2, r1, #6
 8001546:	4651      	mov	r1, sl
 8001548:	1a54      	subs	r4, r2, r1
 800154a:	4659      	mov	r1, fp
 800154c:	eb63 0501 	sbc.w	r5, r3, r1
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	00eb      	lsls	r3, r5, #3
 800155a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800155e:	00e2      	lsls	r2, r4, #3
 8001560:	4614      	mov	r4, r2
 8001562:	461d      	mov	r5, r3
 8001564:	4643      	mov	r3, r8
 8001566:	18e3      	adds	r3, r4, r3
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	464b      	mov	r3, r9
 800156c:	eb45 0303 	adc.w	r3, r5, r3
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800157e:	4629      	mov	r1, r5
 8001580:	028b      	lsls	r3, r1, #10
 8001582:	4621      	mov	r1, r4
 8001584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001588:	4621      	mov	r1, r4
 800158a:	028a      	lsls	r2, r1, #10
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001594:	2200      	movs	r2, #0
 8001596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001598:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800159a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800159e:	f7fe fe31 	bl	8000204 <__aeabi_uldivmod>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4613      	mov	r3, r2
 80015a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015ac:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	0f1b      	lsrs	r3, r3, #28
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80015ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ca:	e003      	b.n	80015d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80015ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	37b8      	adds	r7, #184	@ 0xb8
 80015dc:	46bd      	mov	sp, r7
 80015de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	00f42400 	.word	0x00f42400

080015ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e28d      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8083 	beq.w	8001712 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800160c:	4b94      	ldr	r3, [pc, #592]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b04      	cmp	r3, #4
 8001616:	d019      	beq.n	800164c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001618:	4b91      	ldr	r3, [pc, #580]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001620:	2b08      	cmp	r3, #8
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001624:	4b8e      	ldr	r3, [pc, #568]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001630:	d00c      	beq.n	800164c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001632:	4b8b      	ldr	r3, [pc, #556]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800163a:	2b0c      	cmp	r3, #12
 800163c:	d112      	bne.n	8001664 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163e:	4b88      	ldr	r3, [pc, #544]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800164a:	d10b      	bne.n	8001664 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	4b84      	ldr	r3, [pc, #528]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d05b      	beq.n	8001710 <HAL_RCC_OscConfig+0x124>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d157      	bne.n	8001710 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e25a      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800166c:	d106      	bne.n	800167c <HAL_RCC_OscConfig+0x90>
 800166e:	4b7c      	ldr	r3, [pc, #496]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a7b      	ldr	r2, [pc, #492]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e01d      	b.n	80016b8 <HAL_RCC_OscConfig+0xcc>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0xb4>
 8001686:	4b76      	ldr	r3, [pc, #472]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a75      	ldr	r2, [pc, #468]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b73      	ldr	r3, [pc, #460]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a72      	ldr	r2, [pc, #456]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0xcc>
 80016a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6e      	ldr	r2, [pc, #440]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6b      	ldr	r2, [pc, #428]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff f9d4 	bl	8000a6c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff f9d0 	bl	8000a6c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	@ 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e21f      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b61      	ldr	r3, [pc, #388]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0xdc>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff f9c0 	bl	8000a6c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff f9bc 	bl	8000a6c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	@ 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e20b      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	4b57      	ldr	r3, [pc, #348]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x104>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d06f      	beq.n	80017fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800171e:	4b50      	ldr	r3, [pc, #320]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	d017      	beq.n	800175a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800172a:	4b4d      	ldr	r3, [pc, #308]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001732:	2b08      	cmp	r3, #8
 8001734:	d105      	bne.n	8001742 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001736:	4b4a      	ldr	r3, [pc, #296]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b47      	ldr	r3, [pc, #284]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b44      	ldr	r3, [pc, #272]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d116      	bne.n	8001788 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x186>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e1d3      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b3b      	ldr	r3, [pc, #236]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4937      	ldr	r1, [pc, #220]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	e03a      	b.n	80017fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001790:	4b34      	ldr	r3, [pc, #208]	@ (8001864 <HAL_RCC_OscConfig+0x278>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff f969 	bl	8000a6c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff f965 	bl	8000a6c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1b4      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4925      	ldr	r1, [pc, #148]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <HAL_RCC_OscConfig+0x278>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff f948 	bl	8000a6c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff f944 	bl	8000a6c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e193      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d036      	beq.n	8001878 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d016      	beq.n	8001840 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff f928 	bl	8000a6c <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff f924 	bl	8000a6c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e173      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_RCC_OscConfig+0x274>)
 8001834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x234>
 800183e:	e01b      	b.n	8001878 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff f911 	bl	8000a6c <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	e00e      	b.n	800186c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff f90d 	bl	8000a6c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d907      	bls.n	800186c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e15c      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
 8001860:	40023800 	.word	0x40023800
 8001864:	42470000 	.word	0x42470000
 8001868:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	4b8a      	ldr	r3, [pc, #552]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800186e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ea      	bne.n	800184e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 8097 	beq.w	80019b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b83      	ldr	r3, [pc, #524]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10f      	bne.n	80018b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	4b79      	ldr	r3, [pc, #484]	@ (8001a9c <HAL_RCC_OscConfig+0x4b0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d118      	bne.n	80018f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c2:	4b76      	ldr	r3, [pc, #472]	@ (8001a9c <HAL_RCC_OscConfig+0x4b0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a75      	ldr	r2, [pc, #468]	@ (8001a9c <HAL_RCC_OscConfig+0x4b0>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7ff f8cd 	bl	8000a6c <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d6:	f7ff f8c9 	bl	8000a6c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e118      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a9c <HAL_RCC_OscConfig+0x4b0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x31e>
 80018fc:	4b66      	ldr	r3, [pc, #408]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001900:	4a65      	ldr	r2, [pc, #404]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	@ 0x70
 8001908:	e01c      	b.n	8001944 <HAL_RCC_OscConfig+0x358>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x340>
 8001912:	4b61      	ldr	r3, [pc, #388]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001916:	4a60      	ldr	r2, [pc, #384]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	@ 0x70
 800191e:	4b5e      	ldr	r3, [pc, #376]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001922:	4a5d      	ldr	r2, [pc, #372]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6713      	str	r3, [r2, #112]	@ 0x70
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0x358>
 800192c:	4b5a      	ldr	r3, [pc, #360]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001930:	4a59      	ldr	r2, [pc, #356]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	@ 0x70
 8001938:	4b57      	ldr	r3, [pc, #348]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193c:	4a56      	ldr	r2, [pc, #344]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800193e:	f023 0304 	bic.w	r3, r3, #4
 8001942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d015      	beq.n	8001978 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff f88e 	bl	8000a6c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f88a 	bl	8000a6c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0d7      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0ee      	beq.n	8001954 <HAL_RCC_OscConfig+0x368>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff f878 	bl	8000a6c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7ff f874 	bl	8000a6c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0c1      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001996:	4b40      	ldr	r3, [pc, #256]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ee      	bne.n	8001980 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80019ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80ad 	beq.w	8001b18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019be:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d060      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d145      	bne.n	8001a5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b33      	ldr	r3, [pc, #204]	@ (8001aa0 <HAL_RCC_OscConfig+0x4b4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f848 	bl	8000a6c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f844 	bl	8000a6c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e093      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b29      	ldr	r3, [pc, #164]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	3b01      	subs	r3, #1
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a28:	071b      	lsls	r3, r3, #28
 8001a2a:	491b      	ldr	r1, [pc, #108]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <HAL_RCC_OscConfig+0x4b4>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff f819 	bl	8000a6c <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff f815 	bl	8000a6c <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e064      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x452>
 8001a5c:	e05c      	b.n	8001b18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <HAL_RCC_OscConfig+0x4b4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f802 	bl	8000a6c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7fe fffe 	bl	8000a6c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e04d      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x480>
 8001a8a:	e045      	b.n	8001b18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e040      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <HAL_RCC_OscConfig+0x538>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d030      	beq.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d129      	bne.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d122      	bne.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d119      	bne.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	3b01      	subs	r3, #1
 8001aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d10f      	bne.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e041      	b.n	8001bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fe62 	bl	8000818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3304      	adds	r3, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f000 fad8 	bl	800211c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e041      	b.n	8001c5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d106      	bne.n	8001bf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f839 	bl	8001c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3304      	adds	r3, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f000 fa89 	bl	800211c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_TIM_PWM_Start+0x24>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e022      	b.n	8001ce2 <HAL_TIM_PWM_Start+0x6a>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d109      	bne.n	8001cb6 <HAL_TIM_PWM_Start+0x3e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	bf14      	ite	ne
 8001cae:	2301      	movne	r3, #1
 8001cb0:	2300      	moveq	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	e015      	b.n	8001ce2 <HAL_TIM_PWM_Start+0x6a>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d109      	bne.n	8001cd0 <HAL_TIM_PWM_Start+0x58>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e008      	b.n	8001ce2 <HAL_TIM_PWM_Start+0x6a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	bf14      	ite	ne
 8001cdc:	2301      	movne	r3, #1
 8001cde:	2300      	moveq	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07c      	b.n	8001de4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d104      	bne.n	8001cfa <HAL_TIM_PWM_Start+0x82>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cf8:	e013      	b.n	8001d22 <HAL_TIM_PWM_Start+0xaa>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d104      	bne.n	8001d0a <HAL_TIM_PWM_Start+0x92>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d08:	e00b      	b.n	8001d22 <HAL_TIM_PWM_Start+0xaa>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d104      	bne.n	8001d1a <HAL_TIM_PWM_Start+0xa2>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d18:	e003      	b.n	8001d22 <HAL_TIM_PWM_Start+0xaa>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2201      	movs	r2, #1
 8001d28:	6839      	ldr	r1, [r7, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fce6 	bl	80026fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2d      	ldr	r2, [pc, #180]	@ (8001dec <HAL_TIM_PWM_Start+0x174>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_TIM_PWM_Start+0xcc>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001df0 <HAL_TIM_PWM_Start+0x178>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_TIM_PWM_Start+0xd0>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_TIM_PWM_Start+0xd2>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a22      	ldr	r2, [pc, #136]	@ (8001dec <HAL_TIM_PWM_Start+0x174>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d022      	beq.n	8001dae <HAL_TIM_PWM_Start+0x136>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d70:	d01d      	beq.n	8001dae <HAL_TIM_PWM_Start+0x136>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <HAL_TIM_PWM_Start+0x17c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d018      	beq.n	8001dae <HAL_TIM_PWM_Start+0x136>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1d      	ldr	r2, [pc, #116]	@ (8001df8 <HAL_TIM_PWM_Start+0x180>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_TIM_PWM_Start+0x136>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dfc <HAL_TIM_PWM_Start+0x184>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00e      	beq.n	8001dae <HAL_TIM_PWM_Start+0x136>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a16      	ldr	r2, [pc, #88]	@ (8001df0 <HAL_TIM_PWM_Start+0x178>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d009      	beq.n	8001dae <HAL_TIM_PWM_Start+0x136>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a18      	ldr	r2, [pc, #96]	@ (8001e00 <HAL_TIM_PWM_Start+0x188>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d004      	beq.n	8001dae <HAL_TIM_PWM_Start+0x136>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <HAL_TIM_PWM_Start+0x18c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d111      	bne.n	8001dd2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b06      	cmp	r3, #6
 8001dbe:	d010      	beq.n	8001de2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd0:	e007      	b.n	8001de2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40010400 	.word	0x40010400
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40000800 	.word	0x40000800
 8001dfc:	40000c00 	.word	0x40000c00
 8001e00:	40014000 	.word	0x40014000
 8001e04:	40001800 	.word	0x40001800

08001e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e0ae      	b.n	8001f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	f200 809f 	bhi.w	8001f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e36:	a201      	add	r2, pc, #4	@ (adr r2, 8001e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e71 	.word	0x08001e71
 8001e40:	08001f75 	.word	0x08001f75
 8001e44:	08001f75 	.word	0x08001f75
 8001e48:	08001f75 	.word	0x08001f75
 8001e4c:	08001eb1 	.word	0x08001eb1
 8001e50:	08001f75 	.word	0x08001f75
 8001e54:	08001f75 	.word	0x08001f75
 8001e58:	08001f75 	.word	0x08001f75
 8001e5c:	08001ef3 	.word	0x08001ef3
 8001e60:	08001f75 	.word	0x08001f75
 8001e64:	08001f75 	.word	0x08001f75
 8001e68:	08001f75 	.word	0x08001f75
 8001e6c:	08001f33 	.word	0x08001f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f9f6 	bl	8002268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0208 	orr.w	r2, r2, #8
 8001e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0204 	bic.w	r2, r2, #4
 8001e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6999      	ldr	r1, [r3, #24]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	619a      	str	r2, [r3, #24]
      break;
 8001eae:	e064      	b.n	8001f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fa46 	bl	8002348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6999      	ldr	r1, [r3, #24]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	021a      	lsls	r2, r3, #8
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	619a      	str	r2, [r3, #24]
      break;
 8001ef0:	e043      	b.n	8001f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fa9b 	bl	8002434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0208 	orr.w	r2, r2, #8
 8001f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0204 	bic.w	r2, r2, #4
 8001f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69d9      	ldr	r1, [r3, #28]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	61da      	str	r2, [r3, #28]
      break;
 8001f30:	e023      	b.n	8001f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 faef 	bl	800251c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69d9      	ldr	r1, [r3, #28]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	021a      	lsls	r2, r3, #8
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	61da      	str	r2, [r3, #28]
      break;
 8001f72:	e002      	b.n	8001f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	75fb      	strb	r3, [r7, #23]
      break;
 8001f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0b4      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x186>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fe0:	d03e      	beq.n	8002060 <HAL_TIM_ConfigClockSource+0xd4>
 8001fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fe6:	f200 8087 	bhi.w	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fee:	f000 8086 	beq.w	80020fe <HAL_TIM_ConfigClockSource+0x172>
 8001ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ff6:	d87f      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ff8:	2b70      	cmp	r3, #112	@ 0x70
 8001ffa:	d01a      	beq.n	8002032 <HAL_TIM_ConfigClockSource+0xa6>
 8001ffc:	2b70      	cmp	r3, #112	@ 0x70
 8001ffe:	d87b      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002000:	2b60      	cmp	r3, #96	@ 0x60
 8002002:	d050      	beq.n	80020a6 <HAL_TIM_ConfigClockSource+0x11a>
 8002004:	2b60      	cmp	r3, #96	@ 0x60
 8002006:	d877      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002008:	2b50      	cmp	r3, #80	@ 0x50
 800200a:	d03c      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0xfa>
 800200c:	2b50      	cmp	r3, #80	@ 0x50
 800200e:	d873      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002010:	2b40      	cmp	r3, #64	@ 0x40
 8002012:	d058      	beq.n	80020c6 <HAL_TIM_ConfigClockSource+0x13a>
 8002014:	2b40      	cmp	r3, #64	@ 0x40
 8002016:	d86f      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002018:	2b30      	cmp	r3, #48	@ 0x30
 800201a:	d064      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x15a>
 800201c:	2b30      	cmp	r3, #48	@ 0x30
 800201e:	d86b      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002020:	2b20      	cmp	r3, #32
 8002022:	d060      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002024:	2b20      	cmp	r3, #32
 8002026:	d867      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002028:	2b00      	cmp	r3, #0
 800202a:	d05c      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x15a>
 800202c:	2b10      	cmp	r3, #16
 800202e:	d05a      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002030:	e062      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002042:	f000 fb3b 	bl	80026bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	609a      	str	r2, [r3, #8]
      break;
 800205e:	e04f      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002070:	f000 fb24 	bl	80026bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002082:	609a      	str	r2, [r3, #8]
      break;
 8002084:	e03c      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002092:	461a      	mov	r2, r3
 8002094:	f000 fa98 	bl	80025c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2150      	movs	r1, #80	@ 0x50
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 faf1 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 80020a4:	e02c      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020b2:	461a      	mov	r2, r3
 80020b4:	f000 fab7 	bl	8002626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2160      	movs	r1, #96	@ 0x60
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fae1 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 80020c4:	e01c      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d2:	461a      	mov	r2, r3
 80020d4:	f000 fa78 	bl	80025c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2140      	movs	r1, #64	@ 0x40
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fad1 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 80020e4:	e00c      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f000 fac8 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 80020f6:	e003      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      break;
 80020fc:	e000      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a43      	ldr	r2, [pc, #268]	@ (800223c <TIM_Base_SetConfig+0x120>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213a:	d00f      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a40      	ldr	r2, [pc, #256]	@ (8002240 <TIM_Base_SetConfig+0x124>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00b      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3f      	ldr	r2, [pc, #252]	@ (8002244 <TIM_Base_SetConfig+0x128>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3e      	ldr	r2, [pc, #248]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3d      	ldr	r2, [pc, #244]	@ (800224c <TIM_Base_SetConfig+0x130>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d108      	bne.n	800216e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a32      	ldr	r2, [pc, #200]	@ (800223c <TIM_Base_SetConfig+0x120>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d02b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217c:	d027      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2f      	ldr	r2, [pc, #188]	@ (8002240 <TIM_Base_SetConfig+0x124>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d023      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2e      	ldr	r2, [pc, #184]	@ (8002244 <TIM_Base_SetConfig+0x128>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2d      	ldr	r2, [pc, #180]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2c      	ldr	r2, [pc, #176]	@ (800224c <TIM_Base_SetConfig+0x130>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d017      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002250 <TIM_Base_SetConfig+0x134>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002254 <TIM_Base_SetConfig+0x138>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00f      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a29      	ldr	r2, [pc, #164]	@ (8002258 <TIM_Base_SetConfig+0x13c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a28      	ldr	r2, [pc, #160]	@ (800225c <TIM_Base_SetConfig+0x140>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a27      	ldr	r2, [pc, #156]	@ (8002260 <TIM_Base_SetConfig+0x144>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d003      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a26      	ldr	r2, [pc, #152]	@ (8002264 <TIM_Base_SetConfig+0x148>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d108      	bne.n	80021e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a0e      	ldr	r2, [pc, #56]	@ (800223c <TIM_Base_SetConfig+0x120>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d003      	beq.n	800220e <TIM_Base_SetConfig+0xf2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a10      	ldr	r2, [pc, #64]	@ (800224c <TIM_Base_SetConfig+0x130>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d103      	bne.n	8002216 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f043 0204 	orr.w	r2, r3, #4
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	601a      	str	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40010000 	.word	0x40010000
 8002240:	40000400 	.word	0x40000400
 8002244:	40000800 	.word	0x40000800
 8002248:	40000c00 	.word	0x40000c00
 800224c:	40010400 	.word	0x40010400
 8002250:	40014000 	.word	0x40014000
 8002254:	40014400 	.word	0x40014400
 8002258:	40014800 	.word	0x40014800
 800225c:	40001800 	.word	0x40001800
 8002260:	40001c00 	.word	0x40001c00
 8002264:	40002000 	.word	0x40002000

08002268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 0201 	bic.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f023 0302 	bic.w	r3, r3, #2
 80022b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a20      	ldr	r2, [pc, #128]	@ (8002340 <TIM_OC1_SetConfig+0xd8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <TIM_OC1_SetConfig+0x64>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002344 <TIM_OC1_SetConfig+0xdc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d10c      	bne.n	80022e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0308 	bic.w	r3, r3, #8
 80022d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a15      	ldr	r2, [pc, #84]	@ (8002340 <TIM_OC1_SetConfig+0xd8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d003      	beq.n	80022f6 <TIM_OC1_SetConfig+0x8e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a14      	ldr	r2, [pc, #80]	@ (8002344 <TIM_OC1_SetConfig+0xdc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d111      	bne.n	800231a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	621a      	str	r2, [r3, #32]
}
 8002334:	bf00      	nop
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40010000 	.word	0x40010000
 8002344:	40010400 	.word	0x40010400

08002348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f023 0210 	bic.w	r2, r3, #16
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800237e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f023 0320 	bic.w	r3, r3, #32
 8002392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4313      	orrs	r3, r2
 800239e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a22      	ldr	r2, [pc, #136]	@ (800242c <TIM_OC2_SetConfig+0xe4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d003      	beq.n	80023b0 <TIM_OC2_SetConfig+0x68>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a21      	ldr	r2, [pc, #132]	@ (8002430 <TIM_OC2_SetConfig+0xe8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d10d      	bne.n	80023cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a17      	ldr	r2, [pc, #92]	@ (800242c <TIM_OC2_SetConfig+0xe4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d003      	beq.n	80023dc <TIM_OC2_SetConfig+0x94>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a16      	ldr	r2, [pc, #88]	@ (8002430 <TIM_OC2_SetConfig+0xe8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d113      	bne.n	8002404 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	621a      	str	r2, [r3, #32]
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000
 8002430:	40010400 	.word	0x40010400

08002434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800247c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a21      	ldr	r2, [pc, #132]	@ (8002514 <TIM_OC3_SetConfig+0xe0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d003      	beq.n	800249a <TIM_OC3_SetConfig+0x66>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a20      	ldr	r2, [pc, #128]	@ (8002518 <TIM_OC3_SetConfig+0xe4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10d      	bne.n	80024b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <TIM_OC3_SetConfig+0xe0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d003      	beq.n	80024c6 <TIM_OC3_SetConfig+0x92>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <TIM_OC3_SetConfig+0xe4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d113      	bne.n	80024ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	621a      	str	r2, [r3, #32]
}
 8002508:	bf00      	nop
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40010000 	.word	0x40010000
 8002518:	40010400 	.word	0x40010400

0800251c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800254a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	031b      	lsls	r3, r3, #12
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <TIM_OC4_SetConfig+0xa4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <TIM_OC4_SetConfig+0x68>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a11      	ldr	r2, [pc, #68]	@ (80025c4 <TIM_OC4_SetConfig+0xa8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d109      	bne.n	8002598 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800258a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	621a      	str	r2, [r3, #32]
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40010400 	.word	0x40010400

080025c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0201 	bic.w	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f023 030a 	bic.w	r3, r3, #10
 8002604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	621a      	str	r2, [r3, #32]
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002626:	b480      	push	{r7}
 8002628:	b087      	sub	sp, #28
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f023 0210 	bic.w	r2, r3, #16
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	031b      	lsls	r3, r3, #12
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002662:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	4313      	orrs	r3, r2
 800266c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	621a      	str	r2, [r3, #32]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800269c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f043 0307 	orr.w	r3, r3, #7
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	021a      	lsls	r2, r3, #8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	431a      	orrs	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2201      	movs	r2, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	621a      	str	r2, [r3, #32]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800275c:	2302      	movs	r3, #2
 800275e:	e05a      	b.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a21      	ldr	r2, [pc, #132]	@ (8002824 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d022      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ac:	d01d      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d018      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002830 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00e      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a18      	ldr	r2, [pc, #96]	@ (8002834 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d004      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a15      	ldr	r2, [pc, #84]	@ (800283c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10c      	bne.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40010000 	.word	0x40010000
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800
 8002830:	40000c00 	.word	0x40000c00
 8002834:	40010400 	.word	0x40010400
 8002838:	40014000 	.word	0x40014000
 800283c:	40001800 	.word	0x40001800

08002840 <memset>:
 8002840:	4402      	add	r2, r0
 8002842:	4603      	mov	r3, r0
 8002844:	4293      	cmp	r3, r2
 8002846:	d100      	bne.n	800284a <memset+0xa>
 8002848:	4770      	bx	lr
 800284a:	f803 1b01 	strb.w	r1, [r3], #1
 800284e:	e7f9      	b.n	8002844 <memset+0x4>

08002850 <__libc_init_array>:
 8002850:	b570      	push	{r4, r5, r6, lr}
 8002852:	4d0d      	ldr	r5, [pc, #52]	@ (8002888 <__libc_init_array+0x38>)
 8002854:	4c0d      	ldr	r4, [pc, #52]	@ (800288c <__libc_init_array+0x3c>)
 8002856:	1b64      	subs	r4, r4, r5
 8002858:	10a4      	asrs	r4, r4, #2
 800285a:	2600      	movs	r6, #0
 800285c:	42a6      	cmp	r6, r4
 800285e:	d109      	bne.n	8002874 <__libc_init_array+0x24>
 8002860:	4d0b      	ldr	r5, [pc, #44]	@ (8002890 <__libc_init_array+0x40>)
 8002862:	4c0c      	ldr	r4, [pc, #48]	@ (8002894 <__libc_init_array+0x44>)
 8002864:	f000 f818 	bl	8002898 <_init>
 8002868:	1b64      	subs	r4, r4, r5
 800286a:	10a4      	asrs	r4, r4, #2
 800286c:	2600      	movs	r6, #0
 800286e:	42a6      	cmp	r6, r4
 8002870:	d105      	bne.n	800287e <__libc_init_array+0x2e>
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	f855 3b04 	ldr.w	r3, [r5], #4
 8002878:	4798      	blx	r3
 800287a:	3601      	adds	r6, #1
 800287c:	e7ee      	b.n	800285c <__libc_init_array+0xc>
 800287e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002882:	4798      	blx	r3
 8002884:	3601      	adds	r6, #1
 8002886:	e7f2      	b.n	800286e <__libc_init_array+0x1e>
 8002888:	080028c8 	.word	0x080028c8
 800288c:	080028c8 	.word	0x080028c8
 8002890:	080028c8 	.word	0x080028c8
 8002894:	080028cc 	.word	0x080028cc

08002898 <_init>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	bf00      	nop
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr

080028a4 <_fini>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr
