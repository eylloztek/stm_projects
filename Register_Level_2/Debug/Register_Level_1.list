
Register_Level_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000190  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0000135c  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  0000135c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  0800035c  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00001354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000358  08000358  00001358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800035c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800035c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000355  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000103  00000000  00000000  000016e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000017e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a65  00000000  00000000  0000185d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005cf  00000000  00000000  0001a2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b110  00000000  00000000  0001a891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a59a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000a59e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000a5a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800033c 	.word	0x0800033c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800033c 	.word	0x0800033c

08000204 <main>:

#include <stdint.h>
#include "stm32f4xx.h"

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= (1<<0);
 800020a:	4b22      	ldr	r3, [pc, #136]	@ (8000294 <main+0x90>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020e:	4a21      	ldr	r2, [pc, #132]	@ (8000294 <main+0x90>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA -> MODER &= ~(3<<(5*2));
 8000216:	4b20      	ldr	r3, [pc, #128]	@ (8000298 <main+0x94>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a1f      	ldr	r2, [pc, #124]	@ (8000298 <main+0x94>)
 800021c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000220:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (1<<(5*2));
 8000222:	4b1d      	ldr	r3, [pc, #116]	@ (8000298 <main+0x94>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a1c      	ldr	r2, [pc, #112]	@ (8000298 <main+0x94>)
 8000228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800022c:	6013      	str	r3, [r2, #0]

	GPIOA -> OTYPER &= ~(1<<5);
 800022e:	4b1a      	ldr	r3, [pc, #104]	@ (8000298 <main+0x94>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4a19      	ldr	r2, [pc, #100]	@ (8000298 <main+0x94>)
 8000234:	f023 0320 	bic.w	r3, r3, #32
 8000238:	6053      	str	r3, [r2, #4]

	GPIOA -> OSPEEDR |= (3<<(5*2));
 800023a:	4b17      	ldr	r3, [pc, #92]	@ (8000298 <main+0x94>)
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	4a16      	ldr	r2, [pc, #88]	@ (8000298 <main+0x94>)
 8000240:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000244:	6093      	str	r3, [r2, #8]

	GPIOA -> PUPDR &= ~(3<<(5*2));
 8000246:	4b14      	ldr	r3, [pc, #80]	@ (8000298 <main+0x94>)
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	4a13      	ldr	r2, [pc, #76]	@ (8000298 <main+0x94>)
 800024c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000250:	60d3      	str	r3, [r2, #12]

    while(1){

    	GPIOA -> ODR |= (1<<5);
 8000252:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <main+0x94>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a10      	ldr	r2, [pc, #64]	@ (8000298 <main+0x94>)
 8000258:	f043 0320 	orr.w	r3, r3, #32
 800025c:	6153      	str	r3, [r2, #20]
    	for (int var = 0; var < 1000000; ++var);
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	e002      	b.n	800026a <main+0x66>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3301      	adds	r3, #1
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a0b      	ldr	r2, [pc, #44]	@ (800029c <main+0x98>)
 800026e:	4293      	cmp	r3, r2
 8000270:	ddf8      	ble.n	8000264 <main+0x60>
    	GPIOA -> ODR &= ~(1<<5);
 8000272:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <main+0x94>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a08      	ldr	r2, [pc, #32]	@ (8000298 <main+0x94>)
 8000278:	f023 0320 	bic.w	r3, r3, #32
 800027c:	6153      	str	r3, [r2, #20]
    	for (int var = 0; var < 1000000; ++var);
 800027e:	2300      	movs	r3, #0
 8000280:	603b      	str	r3, [r7, #0]
 8000282:	e002      	b.n	800028a <main+0x86>
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	3301      	adds	r3, #1
 8000288:	603b      	str	r3, [r7, #0]
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	4a03      	ldr	r2, [pc, #12]	@ (800029c <main+0x98>)
 800028e:	4293      	cmp	r3, r2
 8000290:	ddf8      	ble.n	8000284 <main+0x80>
    	GPIOA -> ODR |= (1<<5);
 8000292:	e7de      	b.n	8000252 <main+0x4e>
 8000294:	40023800 	.word	0x40023800
 8000298:	40020000 	.word	0x40020000
 800029c:	000f423f 	.word	0x000f423f

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	@ (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	@ (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	@ (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	@ (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff97 	bl	8000204 <main>

080002d6 <LoopForever>:

LoopForever:
  b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	4d0d      	ldr	r5, [pc, #52]	@ (800032c <__libc_init_array+0x38>)
 80002f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000330 <__libc_init_array+0x3c>)
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	2600      	movs	r6, #0
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	4d0b      	ldr	r5, [pc, #44]	@ (8000334 <__libc_init_array+0x40>)
 8000306:	4c0c      	ldr	r4, [pc, #48]	@ (8000338 <__libc_init_array+0x44>)
 8000308:	f000 f818 	bl	800033c <_init>
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	10a4      	asrs	r4, r4, #2
 8000310:	2600      	movs	r6, #0
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
